[{"type":"text","text":"Available API endpoints (176 total):\n\nDeleteAccountsAccount: With Connect, you can delete accounts you manage. Test-mode accounts can be deleted at any time. Live-mode accounts that have access to the standard d\nDeleteCouponsCoupon: You can delete coupons via the coupon management page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have alrea\nDeleteCustomersCustomer: Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.\nDeleteEphemeralKeysKey: Invalidates a short-lived API key for a given resource.\nDeleteInvoiceitemsInvoiceitem: Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attach\nDeleteInvoicesInvoice: Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an\nDeletePlansPlan: Deleting plans means new subscribers can’t be added. Existing subscribers aren’t affected.\nDeleteProductsId: Delete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting a product with type=good is only \nDeleteSubscriptionItemsItem: Deletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.\nDeleteSubscriptionsSubscriptionExposedId: Cancels a customer’s subscription immediately. The customer won’t be charged again for the subscription. After it’s canceled, you can no longer update\nDeleteTaxIdsId: Deletes an existing account or customer tax_id object.\nDeleteWebhookEndpointsWebhookEndpoint: You can also delete webhook endpoints via the webhook endpoint management page of the Stripe dashboard.\nGetAccount: Retrieves the details of an account.\nGetAccounts: Returns a list of accounts connected to your platform via Connect. If you’re not a platform, the list is empty.\nGetAccountsAccount: Retrieves the details of an account.\nGetApplicationFees: Returns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing\nGetApplicationFeesId: Retrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.\nGetBalance: Retrieves the current account balance, based on the authentication that was used to make the request. For a sample request, see Accounting for negativ\nGetBalanceSettings: Retrieves balance settings for a given connected account. Related guide: Making API calls for connected accounts\nGetBalanceTransactions: Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are retu\nGetBalanceTransactionsId: Retrieves the balance transaction with the given ID. Note that this endpoint previously used the path /v1/balance/history/:id.\nGetCharges: Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.\nGetChargesCharge: Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stri\nGetConfirmationTokensConfirmationToken: Retrieves an existing ConfirmationToken object\nGetCountrySpecs: Lists all Country Spec objects available in the API.\nGetCountrySpecsCountry: Returns a Country Spec for a given Country code.\nGetCoupons: Returns a list of your coupons.\nGetCouponsCoupon: Retrieves the coupon with the given ID.\nGetCreditNotes: Returns a list of credit notes.\nGetCreditNotesId: Retrieves the credit note object with the given identifier.\nGetCustomers: Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.\nGetCustomersCustomer: Retrieves a Customer object.\nGetDisputes: Returns a list of your disputes.\nGetDisputesDispute: Retrieves the dispute with the given ID.\nGetEvents: List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation time, specified in event object api\nGetEventsId: Retrieves the details of an event if it was created in the last 30 days. Supply the unique identifier of the event, which you might have received in a\nGetExchangeRates: [Deprecated] The ExchangeRate APIs are deprecated. Please use the FX Quotes API instead. Returns a list of objects that contain the rates at which for\nGetExchangeRatesRateId: [Deprecated] The ExchangeRate APIs are deprecated. Please use the FX Quotes API instead. Retrieves the exchange rates from the given currency to every\nGetFileLinks: Returns a list of file links.\nGetFileLinksLink: Retrieves the file link with the given ID.\nGetFiles: Returns a list of the files that your account has access to. Stripe sorts and returns the files by their creation dates, placing the most recently cre\nGetFilesFile: Retrieves the details of an existing file object. After you supply a unique file ID, Stripe returns the corresponding file object. Learn how to access\nGetInvoicePayments: When retrieving an invoice, there is an includable payments property containing the first handful of those items. There is also a URL where you can re\nGetInvoicePaymentsInvoicePayment: Retrieves the invoice payment with the given ID.\nGetInvoiceRenderingTemplates: List all templates, ordered by creation date, with the most recently created template appearing first.\nGetInvoiceRenderingTemplatesTemplate: Retrieves an invoice rendering template with the given ID. It by default returns the latest version of the template. Optionally, specify a version to \nGetInvoiceitems: Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first\nGetInvoiceitemsInvoiceitem: Retrieves the invoice item with the given ID.\nGetInvoices: You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently cre\nGetInvoicesInvoice: Retrieves the invoice with the given ID.\nGetLinkAccountSessionsSession: Retrieves the details of a Financial Connections Session\nGetLinkedAccounts: Returns a list of Financial Connections Account objects.\nGetLinkedAccountsAccount: Retrieves the details of an Financial Connections Account.\nGetMandatesMandate: Retrieves a Mandate object.\nGetPaymentIntents: Returns a list of PaymentIntents.\nGetPaymentIntentsIntent: Retrieves the details of a PaymentIntent that has previously been created. You can retrieve a PaymentIntent client-side using a publishable key when t\nGetPaymentLinks: Returns a list of your payment links.\nGetPaymentLinksPaymentLink: Retrieve a payment link.\nGetPaymentMethodConfigurations: List payment method configurations\nGetPaymentMethodConfigurationsConfiguration: Retrieve payment method configuration\nGetPaymentMethodDomains: Lists the details of existing payment method domains.\nGetPaymentMethodDomainsPaymentMethodDomain: Retrieves the details of an existing payment method domain.\nGetPaymentMethods: Returns a list of PaymentMethods for Treasury flows. If you want to list the PaymentMethods attached to a Customer for payments, you should use the Li\nGetPaymentMethodsPaymentMethod: Retrieves a PaymentMethod object attached to the StripeAccount. To retrieve a payment method attached to a Customer, you should use Retrieve a Custome\nGetPayouts: Returns a list of existing payouts sent to third-party bank accounts or payouts that Stripe sent to you. The payouts return in sorted order, with the \nGetPayoutsPayout: Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list. Stripe returns the \nGetPlans: Returns a list of your plans.\nGetPlansPlan: Retrieves the plan with the given ID.\nGetPrices: Returns a list of your active prices, excluding inline prices. For the list of inactive prices, set active to false.\nGetPricesPrice: Retrieves the price with the given ID.\nGetProducts: Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.\nGetProductsId: Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will\nGetPromotionCodes: Returns a list of your promotion codes.\nGetPromotionCodesPromotionCode: Retrieves the promotion code with the given ID. In order to retrieve a promotion code by the customer-facing code use list with the desired code.\nGetQuotes: Returns a list of your quotes.\nGetQuotesQuote: Retrieves the quote with the given ID.\nGetRefunds: Returns a list of all refunds you created. We return the refunds in sorted order, with the most recent refunds appearing first. The 10 most recent ref\nGetRefundsRefund: Retrieves the details of an existing refund.\nGetReviews: Returns a list of Review objects that have open set to true. The objects are sorted in descending order by creation date, with the most recently creat\nGetReviewsReview: Retrieves a Review object.\nGetSetupAttempts: Returns a list of SetupAttempts that associate with a provided SetupIntent.\nGetSetupIntents: Returns a list of SetupIntents.\nGetSetupIntentsIntent: Retrieves the details of a SetupIntent that has previously been created. Client-side retrieval using a publishable key is allowed when the client_secr\nGetShippingRates: Returns a list of your shipping rates.\nGetShippingRatesShippingRateToken: Returns the shipping rate object with the given ID.\nGetSourcesSource: Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date so\nGetSubscriptionItems: Returns a list of your subscription items for a given subscription.\nGetSubscriptionItemsItem: Retrieves the subscription item with the given ID.\nGetSubscriptionSchedules: Retrieves the list of your subscription schedules.\nGetSubscriptionSchedulesSchedule: Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon\nGetSubscriptions: By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify status=canceled.\nGetSubscriptionsSubscriptionExposedId: Retrieves the subscription with the given ID.\nGetTaxCodes: A list of all tax codes available to add to Products in order to allow specific tax calculations.\nGetTaxCodesId: Retrieves the details of an existing tax code. Supply the unique tax code ID and Stripe will return the corresponding tax code information.\nGetTaxIds: Returns a list of tax IDs.\nGetTaxIdsId: Retrieves an account or customer tax_id object.\nGetTaxRates: Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.\nGetTaxRatesTaxRate: Retrieves a tax rate with the given ID\nGetTokensToken: Retrieves the token with the given ID.\nGetTopups: Returns a list of top-ups.\nGetTopupsTopup: Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stri\nGetTransfers: Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers \nGetTransfersTransfer: Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe \nGetWebhookEndpoints: Returns a list of your webhook endpoints.\nGetWebhookEndpointsWebhookEndpoint: Retrieves the webhook endpoint with the given ID.\nPostAccountLinks: Creates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Con\nPostAccountSessions: Creates a AccountSession object that includes a single-use token that the platform can use on their front-end to grant client-side API access.\nPostAccounts: With Connect, you can create Stripe accounts for your users. To do this, you’ll first need to register your platform. If you’ve already collected info\nPostAccountsAccount: Updates a connected account by setting the values of the parameters passed. Any parameters not provided are left unchanged. For accounts where control\nPostBalanceSettings: Updates balance settings for a given connected account. Related guide: Making API calls for connected accounts\nPostCharges: This method is no longer recommended—use the Payment Intents API to initiate a new payment instead. Confirmation of the PaymentIntent creates the Char\nPostChargesCharge: Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\nPostCoupons: You can create coupons easily via the coupon management page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to cr\nPostCouponsCoupon: Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable.\nPostCreditNotes: Issue a credit note to adjust the amount of a finalized invoice. A credit note will first reduce the invoice’s amount_remaining (and amount_due), but \nPostCreditNotesId: Updates an existing credit note.\nPostCustomerSessions: Creates a Customer Session object that includes a single-use client secret that you can use on your front-end to grant client-side API access for cert\nPostCustomers: Creates a new customer object.\nPostCustomersCustomer: Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you\nPostDisputesDispute: When you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the d\nPostEphemeralKeys: Creates a short-lived API key for a given resource.\nPostExternalAccountsId: Updates the metadata, account holder name, account holder type of a bank account belonging to a connected account and optionally sets it as the defaul\nPostFileLinks: Creates a new file link object.\nPostFileLinksLink: Updates an existing file link object. Expired links can no longer be updated.\nPostFiles: To upload a file to Stripe, you need to send a request of type multipart/form-data. Include the file you want to upload in the request, and the parame\nPostInvoiceitems: Creates an item to be added to a draft invoice (up to 250 items per invoice). If no invoice is specified, the item will be on the next invoice created\nPostInvoiceitemsInvoiceitem: Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attache\nPostInvoices: This endpoint creates a draft invoice for a given customer. The invoice remains a draft until you finalize the invoice, which allows you to pay or sen\nPostInvoicesInvoice: Draft invoices are fully editable. Once an invoice is finalized, monetary values, as well as collection_method, become uneditable. If you would like t\nPostLinkAccountSessions: To launch the Financial Connections authorization flow, create a Session. The session’s client_secret can be used to launch the flow using Stripe.js.\nPostPaymentIntents: Creates a PaymentIntent object. After the PaymentIntent is created, attach a payment method and confirm to continue the payment. Learn more about the \nPostPaymentIntentsIntent: Updates properties on a PaymentIntent object without confirming. Depending on which properties you update, you might need to confirm the PaymentIntent\nPostPaymentLinks: Creates a payment link.\nPostPaymentLinksPaymentLink: Updates a payment link.\nPostPaymentMethodConfigurations: Creates a payment method configuration\nPostPaymentMethodConfigurationsConfiguration: Update payment method configuration\nPostPaymentMethodDomains: Creates a payment method domain.\nPostPaymentMethodDomainsPaymentMethodDomain: Updates an existing payment method domain.\nPostPaymentMethods: Creates a PaymentMethod object. Read the Stripe.js reference to learn how to create PaymentMethods via Stripe.js. Instead of creating a PaymentMethod \nPostPaymentMethodsPaymentMethod: Updates a PaymentMethod object. A PaymentMethod must be attached to a customer to be updated.\nPostPayouts: To send funds to your own bank account, create a new payout object. Your Stripe balance must cover the payout amount. If it doesn’t, you receive an “I\nPostPayoutsPayout: Updates the specified payout by setting the values of the parameters you pass. We don’t change parameters that you don’t provide. This request only ac\nPostPlans: You can now model subscriptions more flexibly using the Prices API. It replaces the Plans API and is backwards compatible to simplify your migration.\nPostPlansPlan: Updates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot chang\nPostPrices: Creates a new Price for an existing Product. The Price can be recurring or one-time.\nPostPricesPrice: Updates the specified price by setting the values of the parameters passed. Any parameters not provided are left unchanged.\nPostProducts: Creates a new product object.\nPostProductsId: Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\nPostPromotionCodes: A promotion code points to an underlying promotion. You can optionally restrict the code to a specific customer, redemption limit, and expiration date\nPostPromotionCodesPromotionCode: Updates the specified promotion code by setting the values of the parameters passed. Most fields are, by design, not editable.\nPostQuotes: A quote models prices and services for a customer. Default options for header, description, footer, and expires_at can be set in the dashboard via the\nPostQuotesQuote: A quote models prices and services for a customer.\nPostRefunds: When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it. Creating a new refund will refund a charge th\nPostRefundsRefund: Updates the refund that you specify by setting the values of the passed parameters. Any parameters that you don’t provide remain unchanged. This reque\nPostSetupIntents: Creates a SetupIntent object. After you create the SetupIntent, attach a payment method and confirm it to collect any required permissions to charge t\nPostSetupIntentsIntent: Updates a SetupIntent object.\nPostShippingRates: Creates a new shipping rate object.\nPostShippingRatesShippingRateToken: Updates an existing shipping rate object.\nPostSources: Creates a new source object.\nPostSourcesSource: Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged. This request accepts \nPostSubscriptionItems: Adds a new item to an existing subscription. No existing items will be changed or replaced.\nPostSubscriptionItemsItem: Updates the plan or quantity of an item on a current subscription.\nPostSubscriptionSchedules: Creates a new subscription schedule object. Each customer can have up to 500 active or scheduled subscriptions.\nPostSubscriptionSchedulesSchedule: Updates an existing subscription schedule.\nPostSubscriptions: Creates a new subscription on an existing customer. Each customer can have up to 500 active or scheduled subscriptions. When you create a subscription\nPostSubscriptionsSubscriptionExposedId: Updates an existing subscription to match the specified parameters. When changing prices or quantities, we optionally prorate the price we charge next\nPostTaxIds: Creates a new account or customer tax_id object.\nPostTaxRates: Creates a new tax rate.\nPostTaxRatesTaxRate: Updates an existing tax rate.\nPostTokens: Creates a single-use token that represents a bank account’s details. You can use this token with any v1 API method in place of a bank account dictiona\nPostTopups: Top up the balance of an account\nPostTopupsTopup: Updates the metadata of a top-up. Other top-up details are not editable by design.\nPostTransfers: To send funds from your Stripe account to a connected account, you create a new transfer object. Your Stripe balance must be able to cover the transfe\nPostTransfersTransfer: Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. This request accept\nPostWebhookEndpoints: A webhook endpoint must have a url and a list of enabled_events. You may optionally specify the Boolean connect parameter. If set to true, then a Conn\nPostWebhookEndpointsWebhookEndpoint: Updates the webhook endpoint. You may edit the url, the list of enabled_events, and the status of your endpoint.","description":"Use the get-api-endpoint-schema tool to get the schema for a given API endpoint as input into invoke-api-endpoint. Call this before invoke-api-endpoint."}]